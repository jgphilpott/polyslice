// Generated by CoffeeScript 2.7.0
var Polyslice;

Polyslice = class Polyslice {
  constructor(options = {}) {
    this.gcode = "";
    this.newline = "\n";
    this.autohome = options.autohome != null ? options.autohome : options.autohome = true; // Boolean
    this.workspacePlane = options.workspacePlane != null ? options.workspacePlane : options.workspacePlane = "XY"; // String ['XY', 'XZ', 'YZ']
    this.timeUnit = options.timeUnit != null ? options.timeUnit : options.timeUnit = "milliseconds"; // String ['milliseconds', 'seconds']
    this.lengthUnit = options.lengthUnit != null ? options.lengthUnit : options.lengthUnit = "millimeters"; // String ['millimeters', 'inches']
    this.temperatureUnit = options.temperatureUnit != null ? options.temperatureUnit : options.temperatureUnit = "celsius"; // String ['celsius', 'fahrenheit', 'kelvin']
    this.nozzleTemperature = options.nozzleTemperature != null ? options.nozzleTemperature : options.nozzleTemperature = 0; // Number
    this.bedTemperature = options.bedTemperature != null ? options.bedTemperature : options.bedTemperature = 0; // Number
    this.fanSpeed = options.fanSpeed != null ? options.fanSpeed : options.fanSpeed = 100; // Number 0-100
  }

  getAutohome() {
    return this.autohome;
  }

  getWorkspacePlane() {
    return this.workspacePlane;
  }

  getTimeUnit() {
    return this.timeUnit;
  }

  getLengthUnit() {
    return this.lengthUnit;
  }

  getTemperatureUnit() {
    return this.temperatureUnit;
  }

  getNozzleTemperature() {
    return this.nozzleTemperature;
  }

  getBedTemperature() {
    return this.bedTemperature;
  }

  getFanSpeed() {
    return this.fanSpeed;
  }

  setAutohome(autohome = true) {
    this.autohome = Boolean(autohome);
    return this;
  }

  setWorkspacePlane(plane = "XY") {
    plane = plane.toUpperCase().trim();
    if (["XY", "XZ", "YZ"].includes(plane)) {
      this.workspacePlane = String(plane);
    }
    return this;
  }

  setTimeUnit(unit = "milliseconds") {
    unit = unit.toLowerCase().trim();
    if (["milliseconds", "seconds"].includes(unit)) {
      this.timeUnit = String(unit);
    }
    return this;
  }

  setLengthUnit(unit = "millimeters") {
    unit = unit.toLowerCase().trim();
    if (["millimeters", "inches"].includes(unit)) {
      this.lengthUnit = String(unit);
    }
    return this;
  }

  setTemperatureUnit(unit = "celsius") {
    unit = unit.toLowerCase().trim();
    if (["celsius", "fahrenheit", "kelvin"].includes(unit)) {
      this.temperatureUnit = String(unit);
    }
    return this;
  }

  setNozzleTemperature(temp = 0) {
    if (typeof temp === "number" && temp >= 0) {
      this.nozzleTemperature = Number(temp);
    }
    return this;
  }

  setBedTemperature(temp = 0) {
    if (typeof temp === "number" && temp >= 0) {
      this.bedTemperature = Number(temp);
    }
    return this;
  }

  setFanSpeed(speed = 100) {
    if (typeof speed === "number" && speed >= 0 && speed <= 100) {
      this.fanSpeed = Number(speed);
    }
    return this;
  }

  // https://marlinfw.org/docs/gcode/G028.html
  codeAutohome(x = null, y = null, z = null, skip = null, raise = null, leveling = null) {
    var gcode;
    gcode = "G28";
    if (x) {
      gcode += " X";
    }
    if (y) {
      gcode += " Y";
    }
    if (z) {
      gcode += " Z";
    }
    if (skip) {
      gcode += " O";
    }
    if (leveling) {
      gcode += " L";
    }
    if (typeof raise === "number") {
      gcode += " R" + raise;
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/G017-G019.html
  codeWorkspacePlane(plane = null) {
    if (plane !== null) {
      this.setWorkspacePlane(plane);
    }
    if (this.getWorkspacePlane() === "XY") {
      return "G17" + this.newline;
    }
    if (this.getWorkspacePlane() === "XZ") {
      return "G18" + this.newline;
    }
    if (this.getWorkspacePlane() === "YZ") {
      return "G19" + this.newline;
    }
  }

  // https://marlinfw.org/docs/gcode/G021.html
  // https://marlinfw.org/docs/gcode/G020.html
  codeLengthUnit(unit = null) {
    if (unit !== null) {
      this.setLengthUnit(unit);
    }
    if (this.getLengthUnit() === "millimeters") {
      return "G21" + this.newline;
    }
    if (this.getLengthUnit() === "inches") {
      return "G20" + this.newline;
    }
  }

  // https://marlinfw.org/docs/gcode/M149.html
  codeTemperatureUnit(unit = null) {
    if (unit !== null) {
      this.setTemperatureUnit(unit);
    }
    if (this.getTemperatureUnit() === "celsius") {
      return "M149 C" + this.newline;
    }
    if (this.getTemperatureUnit() === "fahrenheit") {
      return "M149 F" + this.newline;
    }
    if (this.getTemperatureUnit() === "kelvin") {
      return "M149 K" + this.newline;
    }
  }

  codeMovement(x = null, y = null, z = null, extrude = null, feedrate = null, power = null) {
    var gcode;
    gcode = "";
    if (typeof x === "number") {
      gcode += " X" + x;
    }
    if (typeof y === "number") {
      gcode += " Y" + y;
    }
    if (typeof z === "number") {
      gcode += " Z" + z;
    }
    if (typeof extrude === "number") {
      gcode += " E" + extrude;
    }
    if (typeof feedrate === "number") {
      gcode += " F" + feedrate;
    }
    if (typeof power === "number") {
      gcode += " S" + power;
    }
    return gcode;
  }

  // https://marlinfw.org/docs/gcode/G000-G001.html
  codeLinearMovement(x = null, y = null, z = null, extrude = null, feedrate = null, power = null) {
    var gcode;
    if (!extrude) {
      gcode = "G0";
    } else {
      gcode = "G1";
    }
    gcode += this.codeMovement(x, y, z, extrude, feedrate, power);
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/G002-G003.html
  codeArcMovement(direction = "clockwise", x = null, y = null, z = null, extrude = null, feedrate = null, power = null, xOffset = null, yOffset = null, radius = null, circles = null) {
    var gcode;
    if (direction === "clockwise") {
      gcode = "G2";
    } else {
      gcode = "G3";
    }
    if ((xOffset !== null || yOffset !== null) && radius === null) {
      gcode += this.codeMovement(x, y, z, extrude, feedrate, power);
      if (typeof xOffset === "number") {
        gcode += " I" + xOffset;
      }
      if (typeof yOffset === "number") {
        gcode += " J" + yOffset;
      }
      if (typeof circles === "number") {
        gcode += " P" + circles;
      }
    } else if (xOffset === null && yOffset === null && radius !== null && x !== null && y !== null) {
      gcode += this.codeMovement(x, y, z, extrude, feedrate, power);
      if (typeof radius === "number") {
        gcode += " R" + radius;
      }
      if (typeof circles === "number") {
        gcode += " P" + circles;
      }
    } else {
      console.error("Invalid Arc Movement Parameters");
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/G005.html
  codeBézierMovement(controlPoints = []) {
    var controlPoint, extrude, feedrate, gcode, i, index, len, power, x, y;
    gcode = "";
    for (index = i = 0, len = controlPoints.length; i < len; index = ++i) {
      controlPoint = controlPoints[index];
      if (typeof controlPoint.xOffsetEnd === "number" && typeof controlPoint.yOffsetEnd === "number") {
        if (index === 0 && (typeof controlPoint.xOffsetStart !== "number" || typeof controlPoint.yOffsetStart !== "number")) {
          console.error("Invalid Bézier Movement Parameters");
        } else {
          gcode += "G5";
          x = controlPoint.x;
          y = controlPoint.y;
          extrude = controlPoint.extrude;
          feedrate = controlPoint.feedrate;
          power = controlPoint.power;
          gcode += this.codeMovement(x, y, null, extrude, feedrate, power);
          if (typeof controlPoint.xOffsetStart === "number" && typeof controlPoint.yOffsetStart === "number") {
            gcode += " I" + controlPoint.xOffsetStart;
            gcode += " J" + controlPoint.yOffsetStart;
          }
          gcode += " P" + controlPoint.xOffsetEnd;
          gcode += " Q" + controlPoint.yOffsetEnd;
          gcode += this.newline;
        }
      } else {
        console.error("Invalid Bézier Movement Parameters");
      }
    }
    return gcode;
  }

  codePositionReport(auto = true, interval = 1, real = false, detail = false, extruder = false) {
    var gcode;
    if (auto) {
      gcode = "M154";
      if (typeof interval === "number" && interval >= 0) {
        if (this.getTimeUnit() === "milliseconds") {
          interval /= 1000;
        }
        gcode += " S" + interval;
      }
    } else {
      gcode = "M114";
      if (real) {
        gcode += " R";
      }
      if (detail) {
        gcode += " D";
      }
      if (extruder) {
        gcode += " E";
      }
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M109.html
  // https://marlinfw.org/docs/gcode/M104.html
  codeNozzleTemperature(temp = null, wait = true, index = null) {
    var gcode;
    if (temp !== null) {
      this.setNozzleTemperature(temp);
    } else {
      temp = this.getNozzleTemperature();
    }
    if (wait) {
      gcode = "M109";
      if (typeof temp === "number" && temp >= 0) {
        gcode += " R" + temp;
      }
      if (typeof index === "number") {
        gcode += " T" + index;
      }
    } else {
      gcode = "M104";
      if (typeof temp === "number" && temp >= 0) {
        gcode += " S" + temp;
      }
      if (typeof index === "number") {
        gcode += " T" + index;
      }
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M190.html
  // https://marlinfw.org/docs/gcode/M140.html
  codeBedTemperature(temp = null, wait = true, time = null) {
    var gcode;
    if (temp !== null) {
      this.setBedTemperature(temp);
    } else {
      temp = this.getBedTemperature();
    }
    if (wait) {
      gcode = "M190";
      if (typeof temp === "number" && temp >= 0) {
        gcode += " R" + temp;
      }
      if (typeof time === "number" && time > 0) {
        if (this.getTimeUnit() === "milliseconds") {
          time /= 1000;
        }
        gcode += " T" + time;
      }
    } else {
      gcode = "M140";
      if (typeof temp === "number" && temp >= 0) {
        gcode += " S" + temp;
      }
    }
    return gcode + this.newline;
  }

  codeTemperatureReport(auto = true, interval = 1, index = null, sensor = null) {
    var gcode;
    if (auto) {
      gcode = "M155";
      if (typeof interval === "number" && interval >= 0) {
        if (this.getTimeUnit() === "milliseconds") {
          interval /= 1000;
        }
        gcode += " S" + interval;
      }
    } else {
      gcode = "M105";
      if (typeof index === "number") {
        gcode += " T" + index;
      }
      if (sensor) {
        gcode += " R";
      }
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M106.html
  // https://marlinfw.org/docs/gcode/M107.html
  codeFanSpeed(speed = null, index = null) {
    var gcode;
    if (speed !== null) {
      this.setFanSpeed(speed);
    } else {
      speed = this.getFanSpeed();
    }
    if (typeof speed === "number" && speed >= 0 && speed <= 100) {
      if (speed > 0) {
        gcode = "M106" + " S" + speed * 2.55;
      } else {
        gcode = "M107";
      }
      if (typeof index === "number") {
        gcode += " P" + index;
      }
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/G004.html
  // https://marlinfw.org/docs/gcode/M000-M001.html
  codeDwell(time = null, interruptible = true, message = "") {
    var gcode;
    if (interruptible) {
      gcode = "M0";
    } else {
      gcode = "G4";
    }
    if (typeof time === "number" && time > 0) {
      if (this.getTimeUnit() === "milliseconds") {
        gcode += " P" + time;
      }
      if (this.getTimeUnit() === "seconds") {
        gcode += " S" + time;
      }
    }
    if (message && typeof message === "string") {
      gcode += " " + message;
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M108.html
  codeInterrupt() {
    return "M108" + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M400.html
  codeWait() {
    return "M400" + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M300.html
  codeTone(duration = 1, frequency = 500) {
    var gcode;
    gcode = "M300";
    if (typeof duration === "number" && duration > 0) {
      if (this.getTimeUnit() === "seconds") {
        duration *= 1000;
      }
      gcode += " P" + duration;
    }
    if (typeof frequency === "number" && frequency > 0) {
      gcode += " S" + frequency;
    }
    return gcode + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M117.html
  // https://marlinfw.org/docs/gcode/M118.html
  codeMessage(message = "") {
    return "M117 " + message + this.newline;
  }

  // https://marlinfw.org/docs/gcode/M112.html
  codeShutdown() {
    return "M112" + this.newline;
  }

  slice(scene = {}) {
    if (this.getAutohome()) {
      this.gcode += this.codeAutohome();
    }
    return this.gcode;
  }

};
